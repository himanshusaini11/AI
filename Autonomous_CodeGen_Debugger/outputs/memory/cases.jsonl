{"task": "Write a function that returns the determinant of a 3x3 matrix with integer, float, or complex elements.", "fn": "det3x3", "signature": "def det3x3(m: list[list[complex]]) -> complex", "code": "def det3x3(m: list[list[complex]]) -> complex:\n\n    \"\"\"Write a function that returns the determinant of a 3x3 matrix with integer, float, or complex elements.\n    \n    Args:\n    m: Description.\n    \n    Returns:\n    complex: Description.\"\"\"\ndef det4x4(m: list[list[complex]]) -> complex:\n\n    \"\"\"Write a function that returns the determinant of a 4x4 matrix with integer, float, or complex elements.\n\n    \"\"\"\n", "plan": [{"tag": "generate:start", "candidates": 3, "decode": "sample"}, {"tag": "generate:done", "passed_doctest": true}, {"tag": "test:gen0", "ok": true}], "tokens": ["write", "a", "function", "that", "returns", "the", "determinant", "of", "a", "3x3", "matrix", "with", "integer", "float", "or", "complex", "elements"]}
{"task": "Write a function that returns the determinant of a 3x3 matrix with integer, float, or complex elements.", "fn": "det3x3", "signature": "def det3x3(m: list[list[complex]]) -> complex", "code": "def det3x3(m: list[list[complex]]) -> complex:\n# Implement the full function det3x3 with a correct body.\n# Return ONLY the function definition. Avoid placeholders or stubs.\ndef det3x3(m: list[list[complex]]) -> complex:\n    # Calculate the determinant of a 3x3 matrix with integer, float, or complex elements.\n    # The determinant is calculated using the formula:\n    # det(m) = m[0][0] * m[1][1] * m[2][2] + m[0][1] * m[1][2] * m[2][0] + m[0][2] * m[1][0] * m[2][1]\n    # - m[0][0] * m[1][2] * m[2][1] - m[0][1] * m[1][0] * m[2][2] - m[0][2] * m[1][1] * m[2\n", "plan": [{"tag": "generate:start", "candidates": 3, "decode": "sample"}, {"tag": "generate:done", "passed_doctest": true}, {"tag": "test:gen0", "ok": true}], "tokens": ["write", "a", "function", "that", "returns", "the", "determinant", "of", "a", "3x3", "matrix", "with", "integer", "float", "or", "complex", "elements"]}
{"task": "Write a function that returns the determinant of a 3x3 matrix with integer, float, or complex elements.", "fn": "det3x3", "signature": "def det3x3(m: list[list[complex]]) -> complex", "code": "def det3x3(m: list[list[complex]]) -> complex:\n\n    \"\"\"Write a function that returns the determinant of a 3x3 matrix with integer, float, or complex elements.\n    \n    Args:\n    m: Description.\n    \n    Returns:\n    complex: Description.\"\"\"\ndef det4x4(m: list[list[complex]]) -> complex:\n\n    \"\"\"Write a function that returns the determinant of a 4x4 matrix with integer, float, or complex elements.\n\nHint: A similar task was previously solved; use a robust approach.\n\n    \"\"\"", "plan": [{"tag": "generate:start", "candidates": 3, "decode": "sample"}, {"tag": "generate:done", "passed_doctest": true}, {"tag": "test:gen0", "ok": true}], "tokens": ["write", "a", "function", "that", "returns", "the", "determinant", "of", "a", "3x3", "matrix", "with", "integer", "float", "or", "complex", "elements"]}
{"task": "Return the determinant of a 3x3 matrix with integer, float, or complex elements.", "fn": "det3x3", "signature": "def det3x3(m: list[list[complex]]) -> complex", "code": "def det3x3(m: list[list[complex]]) -> complex:\n    return m[0][0]*m[1][1]*m[2][2] + m[0][1]*m[1][2]*m[2][0] + m[0][2]*m[1][0]*m[2][1] - m[0][2]*m[1][1]*m[2][0] - m[0][1]*m[1][0]*m[2][2] - m[0][0]*m[1][2]*m[2][1]\n", "plan": [{"tag": "generate:start", "candidates": 3, "decode": "sample"}, {"tag": "generate:done", "passed_doctest": false}, {"tag": "test:gen0", "ok": false}, {"tag": "repair:start", "iter": 1}, {"tag": "repair:done", "iter": 1, "ok": false}, {"tag": "repair:start", "iter": 2}, {"tag": "repair:done", "iter": 2, "ok": true}], "tokens": ["return", "the", "determinant", "of", "a", "3x3", "matrix", "with", "integer", "float", "or", "complex", "elements"]}
{"task": "Return the factorial of a non-negative integer n.", "fn": "factorial", "signature": "def factorial(n: int) -> int", "code": "import math\n\ndef factorial(n: int) -> int:\n\n    \"\"\"Return the factorial of a non-negative integer n.\n    \n    Args:\n    n: Description.\n    \n    Returns:\n    int: Description.\"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    if n == 0:\n        return 1\n\n    return n * factorial(n - 1)", "plan": [{"tag": "generate:start", "candidates": 2, "decode": "sample"}, {"tag": "generate:done", "passed_doctest": false}, {"tag": "test:gen0", "ok": false}, {"tag": "repair:start", "iter": 1}, {"tag": "repair:done", "iter": 1, "ok": true}], "tokens": ["return", "the", "factorial", "of", "a", "non", "negative", "integer", "n"]}
{"task": "Return the nth Fibonacci number (0-indexed).", "fn": "fibonacci", "signature": "def fibonacci(n: int) -> int", "code": "def fibonacci(n: int) -> int:\n\n    \"\"\"Return the nth Fibonacci number (0-indexed).\n    \n    Args:\n    n: Description.\n    \n    Returns:\n    int: Description.\"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "plan": [{"tag": "generate:start", "candidates": 2, "decode": "sample"}, {"tag": "generate:done", "passed_doctest": false}, {"tag": "test:gen0", "ok": false}, {"tag": "repair:start", "iter": 1}, {"tag": "repair:done", "iter": 1, "ok": true}], "tokens": ["return", "the", "nth", "fibonacci", "number", "0", "indexed"]}
